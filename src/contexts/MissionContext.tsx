'use client' import React, { createContext, useContext, useEffect, useState } from 'react' import { UserMission, UserStats, Mission, MissionStep } from '@/types/mission' import { supabase } from '@/lib/supabase' import { useAuth } from '@/components/auth/AuthProvider' interface MissionContextType { userMissions: UserMission[] userStats: UserStats | null loading: boolean error: string | null // Mission actions startMission: (missionId: string) => Promise<void> updateMissionProgress: (missionId: string, progress: number, steps?: MissionStep[]) => Promise<void> completeMission: (missionId: string, notes?: string) => Promise<void> addMissionNote: (missionId: string, notes: string) => Promise<void> // Helper functions getMissionStatus: (missionId: string) => 'not_started' | 'in_progress' | 'completed' getMissionProgress: (missionId: string) => number getMissionSteps: (missionId: string) => MissionStep[] getInProgressMissions: () => UserMission[] getCompletedMissions: () => UserMission[] // Refresh data refreshData: () => Promise<void> } const MissionContext = createContext<MissionContextType | undefined>(undefined) export function MissionProvider({ children }: { children: React.ReactNode }) { const { user } = useAuth() const [userMissions, setUserMissions] = useState<UserMission[]>([]) const [userStats, setUserStats] = useState<UserStats | null>(null) const [loading, setLoading] = useState(true) const [error, setError] = useState<string | null>(null) const fetchUserMissions = async () => { console.log('🔍 fetchUserMissions: user =', user?.id) if (!user) { console.log('❌ No user found') return } try { console.log('📡 Fetching user missions from Supabase...') const { data, error } = await supabase .from('user_missions') .select('*') .eq('user_id', user.id) .order('created_at', { ascending: false }) if (error) { console.log('❌ Supabase error:', error) throw error } console.log('✅ User missions fetched:', data?.length || 0, 'missions') setUserMissions(data || []) } catch (err) { console.error('❌ Error fetching user missions:', err) setError('Failed to load missions') } } const fetchUserStats = async () => { if (!user) return try { const { data, error } = await supabase .from('user_stats') .select('*') .eq('user_id', user.id) .single() if (error && error.code !== 'PGRST116') throw error setUserStats(data) } catch (err) { console.error('Error fetching user stats:', err) setError('Failed to load stats') } } const refreshData = async () => { console.log('🔄 MissionContext: refreshData called') setLoading(true) await Promise.all([fetchUserMissions(), fetchUserStats()]) setLoading(false) console.log('✅ MissionContext: refreshData completed') } useEffect(() => { console.log('🔄 MissionContext: useEffect triggered, user:', user?.id) console.log('🔄 User object:', user) if (user) { refreshData() } else { console.log('❌ No user, clearing data') setUserMissions([]) setUserStats(null) setLoading(false) } }, [user]) const startMission = async (missionId: string) => { if (!user) return try { const existingMission = userMissions.find(m => m.mission_id === missionId) if (existingMission) { // Update existing mission to in_progress const { error } = await supabase .from('user_missions') .update({ status: 'in_progress', started_at: new Date().toISOString(), progress: 0 }) .eq('id', existingMission.id) if (error) throw error } else { // Create new mission const { error } = await supabase .from('user_missions') .insert({ user_id: user.id, mission_id: missionId, status: 'in_progress', started_at: new Date().toISOString(), progress: 0 }) if (error) throw error } await refreshData() } catch (err) { console.error('Error starting mission:', err) setError('Failed to start mission') } } const updateMissionProgress = async (missionId: string, progress: number, steps?: MissionStep[]) => { if (!user) return try { const userMission = userMissions.find(m => m.mission_id === missionId) if (!userMission) return const updateData: any = { progress } if (steps) { updateData.steps = steps } const { error } = await supabase .from('user_missions') .update(updateData) .eq('id', userMission.id) if (error) throw error await refreshData() } catch (err) { console.error('Error updating mission progress:', err) setError('Failed to update progress') } } const completeMission = async (missionId: string, notes?: string) => { console.log('🚀 MissionContext: completeMission called for:', missionId) if (!user) { console.log('❌ No user found') return } try { const userMission = userMissions.find(m => m.mission_id === missionId) if (!userMission) { console.log('❌ No user mission found for:', missionId) return } console.log('📊 Found user mission:', userMission) const { error } = await supabase .from('user_missions') .update({ status: 'completed', completed: true, completed_at: new Date().toISOString(), progress: 100, user_notes: notes || userMission.user_notes }) .eq('id', userMission.id) if (error) { console.log('❌ Supabase error:', error) throw error } console.log('✅ Mission updated in database') await refreshData() console.log('🔄 Data refreshed') } catch (err) { console.error('❌ Error completing mission:', err) setError('Failed to complete mission') } } const addMissionNote = async (missionId: string, notes: string) => { if (!user) return try { const userMission = userMissions.find(m => m.mission_id === missionId) if (!userMission) return const { error } = await supabase .from('user_missions') .update({ user_notes: notes }) .eq('id', userMission.id) if (error) throw error await refreshData() } catch (err) { console.error('Error adding mission note:', err) setError('Failed to add note') } } const getMissionStatus = (missionId: string): 'not_started' | 'in_progress' | 'completed' => { const userMission = userMissions.find(m => m.mission_id === missionId) return userMission?.status || 'not_started' } const getMissionProgress = (missionId: string): number => { const userMission = userMissions.find(m => m.mission_id === missionId) return userMission?.progress || 0 } const getMissionSteps = (missionId: string): MissionStep[] => { const userMission = userMissions.find(m => m.mission_id === missionId) return userMission?.steps || [] } const getInProgressMissions = (): UserMission[] => { return userMissions.filter(m => m.status === 'in_progress') } const getCompletedMissions = (): UserMission[] => { return userMissions.filter(m => m.status === 'completed') } const value: MissionContextType = { userMissions, userStats, loading, error, startMission, updateMissionProgress, completeMission, addMissionNote, getMissionStatus, getMissionProgress, getMissionSteps, getInProgressMissions, getCompletedMissions, refreshData } return ( <MissionContext.Provider value={value}> {children} </MissionContext.Provider> ) } export function useMissions() { const context = useContext(MissionContext) if (context === undefined) { throw new Error('useMissions must be used within a MissionProvider') } return context } 