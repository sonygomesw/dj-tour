'use client'; import React, { createContext, useContext, useState, useEffect } from 'react'; import type { Contact } from '@/types/contact'; interface ContactContextType { contacts: Contact[]; setContacts: React.Dispatch<React.SetStateAction<Contact[]>>; selectedContact: Contact | null; setSelectedContact: React.Dispatch<React.SetStateAction<Contact | null>>; loading: boolean; } const ContactContext = createContext<ContactContextType | undefined>(undefined); export function ContactProvider({ children }: { children: React.ReactNode }) { const [contacts, setContacts] = useState<Contact[]>([]); const [selectedContact, setSelectedContact] = useState<Contact | null>(null); const [loading, setLoading] = useState(true); useEffect(() => { const initializeContacts = async () => { try { setLoading(true); // TODO: Implement API call } catch (error) { console.error('Error fetching contacts:', error); } finally { setLoading(false); } }; initializeContacts(); }, []); return ( <ContactContext.Provider value={{ contacts, setContacts, selectedContact, setSelectedContact, loading, }} > {children} </ContactContext.Provider> ); } export function useContacts() { const context = useContext(ContactContext); if (context === undefined) { throw new Error('useContacts must be used within a ContactProvider'); } return context; } 