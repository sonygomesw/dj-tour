'use client' import { useState } from 'react'; import { supabase } from '@/lib/supabase'; import { X, Calendar, MapPin, Clock, Euro, Users, Music } from 'lucide-react'; import { NewTourDate } from '@/types/tour'; interface AddTourDateModalProps { isOpen: boolean; onClose: () => void; onSuccess: () => void; } export function AddTourDateModal({ isOpen, onClose, onSuccess }: AddTourDateModalProps) { const [formData, setFormData] = useState<NewTourDate>({ club_name: '', city: '', country: '', event_date: '', start_time: '', end_time: '', fee: undefined, genre: '', status: 'confirmed', capacity: undefined, notes: '' }); const [loading, setLoading] = useState(false); const [error, setError] = useState(''); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setLoading(true); setError(''); try { const { data: { user } } = await supabase.auth.getUser(); if (!user) { setError('Vous devez être connecté pour ajouter une date'); return; } // Prepare data to insert const insertData = { user_id: user.id, club_name: formData.club_name, city: formData.city, country: formData.country, event_date: formData.event_date, start_time: formData.start_time || null, end_time: formData.end_time || null, fee: formData.fee || null, genre: formData.genre || null, status: formData.status, capacity: formData.capacity || null, notes: formData.notes || null }; const { error: insertError } = await supabase .from('tour_dates') .insert(insertData); if (insertError) { console.error('Erreur insertion:', insertError); setError('Erreur lors de l\'ajout de la date'); return; } // Réinitialiser le formulaire setFormData({ club_name: '', city: '', country: '', event_date: '', start_time: '', end_time: '', fee: undefined, genre: '', status: 'confirmed', capacity: undefined, notes: '' }); onSuccess(); onClose(); } catch (error) { console.error('Erreur:', error); setError('Une erreur est survenue'); } finally { setLoading(false); } }; const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: name === 'fee' || name === 'capacity' ? (value ? Number(value) : undefined) : value })); }; if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"> <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"> {/* Header */} <div className="flex items-center justify-between p-6 border-b border-gray-200"> <h2 className="text-2xl font-bold text-gray-900"> Ajouter une date de tournée </h2> <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-full transition-colors"> <X className="w-5 h-5 text-gray-500"/> </button> </div> {/* Form */} <form onSubmit={handleSubmit} className="p-6 space-y-6"> {error && ( <div className="bg-red-50 border border-red-200 rounded-lg p-4"> <p className="text-red-800 text-sm">{error}</p> </div> )} {/* Club & Location */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Music className="w-4 h-4 inline mr-2"/> Nom du club * </label> <input type="text"name="club_name"value={formData.club_name} onChange={handleChange} required className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Ex: Fabric London"/> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <MapPin className="w-4 h-4 inline mr-2"/> Ville * </label> <input type="text"name="city"value={formData.city} onChange={handleChange} required className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Ex: London"/> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Pays * </label> <input type="text"name="country"value={formData.country} onChange={handleChange} required className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Ex: UK"/> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Calendar className="w-4 h-4 inline mr-2"/> Date * </label> <input type="date"name="event_date"value={formData.event_date} onChange={handleChange} required className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"/> </div> </div> {/* Time & Details */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Clock className="w-4 h-4 inline mr-2"/> Heure de début </label> <input type="time"name="start_time"value={formData.start_time} onChange={handleChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"/> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Clock className="w-4 h-4 inline mr-2"/> Heure de fin </label> <input type="time"name="end_time"value={formData.end_time} onChange={handleChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"/> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Euro className="w-4 h-4 inline mr-2"/> Cachet (€) </label> <input type="number"name="fee"value={formData.fee || ''} onChange={handleChange} min="0"step="50"className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Ex: 2500"/> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Genre </label> <select name="genre"value={formData.genre} onChange={handleChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"> <option value="">Sélectionner...</option> <option value="Techno">Techno</option> <option value="House">House</option> <option value="Progressive">Progressive</option> <option value="Trance">Trance</option> <option value="Electro">Electro</option> <option value="Autre">Autre</option> </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> <Users className="w-4 h-4 inline mr-2"/> Capacité </label> <input type="number"name="capacity"value={formData.capacity || ''} onChange={handleChange} min="0"className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Ex: 1000"/> </div> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Statut </label> <select name="status"value={formData.status} onChange={handleChange} className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"> <option value="confirmed">Confirmé</option> <option value="pending">En attente</option> <option value="cancelled">Annulé</option> </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Notes </label> <textarea name="notes"value={formData.notes} onChange={handleChange} rows={3} className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-900"placeholder="Informations supplémentaires..."/> </div> {/* Buttons */} <div className="flex gap-4 pt-4"> <button type="button"onClick={onClose} className="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"> Annuler </button> <button type="submit"disabled={loading} className="flex-1 px-6 py-3 bg-violet-600 text-white rounded-lg hover:bg-violet-700 disabled:opacity-50 transition-colors"> {loading ? 'Ajout...' : 'Ajouter la date'} </button> </div> </form> </div> </div> ); } 