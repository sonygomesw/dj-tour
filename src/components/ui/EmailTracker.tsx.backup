import { useState } from 'react' import { CheckCircle, XCircle, MessageCircle, Phone } from 'lucide-react' import { GlassContainer } from './GlassContainer' import { useContacts } from '../../contexts/ContactContext' import { Contact } from '@/types/contact' interface EmailTrackerProps { onComplete: () => void targetEmails?: number } export function EmailTracker({ onComplete, targetEmails = 100 }: EmailTrackerProps) { const { contacts, updateContact } = useContacts() console.log('EmailTracker: Rendering with contacts:', contacts); const toggleContactStatus = (id: string, field: 'sent' | 'responded' | 'booked') => { const contact = contacts.find(c => c.id === id) if (!contact) { console.log('EmailTracker: Contact not found:', id); return; } console.log('EmailTracker: Toggling status for contact:', contact); console.log('EmailTracker: Current status:', contact.status); console.log('EmailTracker: Field to toggle:', field); let newStatus: 'new' | 'contacted' | 'responded' | 'booked' | 'rejected' = 'new' if (field === 'booked' && contact.status !== 'booked') { newStatus = 'booked' } else if (field === 'responded' && contact.status !== 'responded' && contact.status !== 'booked') { newStatus = 'responded' } else if (field === 'sent' && contact.status === 'new') { newStatus = 'contacted' } else { // Si on d√©sactive un statut, on revient au statut pr√©c√©dent if (contact.status === 'booked') newStatus = 'responded' else if (contact.status === 'responded') newStatus = 'contacted' else if (contact.status === 'contacted') newStatus = 'new' } console.log('EmailTracker: New status:', newStatus); updateContact(id, { status: newStatus }) } const sentCount = contacts.filter(c => c.status === 'contacted' || c.status === 'responded' || c.status === 'booked').length const responseCount = contacts.filter(c => c.status === 'responded' || c.status === 'booked').length const bookedCount = contacts.filter(c => c.status === 'booked').length console.log('EmailTracker: Stats:', { sentCount, responseCount, bookedCount }); return ( <GlassContainer className="p-6"> <div className="space-y-6"> {/* Progress */} <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div className="bg-white/5 rounded-lg p-4"> <div className="text-2xl font-bold text-gray-900 mb-1">{sentCount}/{targetEmails}</div> <div className="text-sm text-gray-600">Messages envoy√©s</div> </div> <div className="bg-white/5 rounded-lg p-4"> <div className="text-2xl font-bold text-green-400 mb-1">{responseCount}</div> <div className="text-sm text-gray-600">R√©ponses re√ßues</div> </div> <div className="bg-white/5 rounded-lg p-4"> <div className="text-2xl font-bold text-purple-400 mb-1">{bookedCount}</div> <div className="text-sm text-gray-600">Bookings confirm√©s</div> </div> </div> {/* Contact List */} {contacts.length > 0 ? ( <div className="space-y-4"> <h3 className="text-lg font-medium text-gray-900">Suivi des contacts</h3> <div className="space-y-3"> {contacts.map((contact) => ( <div key={contact.id} className="bg-white/5 rounded-lg p-4"> <div className="flex items-center justify-between mb-3"> <div> <h4 className="text-gray-900 font-medium">{contact.name}</h4> <p className="text-sm text-gray-600">{contact.club}</p> </div> </div> <div className="flex flex-wrap gap-2"> <button onClick={() => toggleContactStatus(contact.id, 'sent')} className={`flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium transition-colors ${ contact.status === 'contacted' || contact.status === 'responded' || contact.status === 'booked' ? 'bg-green-500/20 text-green-400' : 'bg-white/10 text-gray-600' }`} > <CheckCircle className="w-3 h-3"/> Message envoy√© </button> <button onClick={() => toggleContactStatus(contact.id, 'responded')} className={`flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium transition-colors ${ contact.status === 'responded' || contact.status === 'booked' ? 'bg-blue-500/20 text-blue-400' : 'bg-white/10 text-gray-600' }`} > <MessageCircle className="w-3 h-3"/> R√©ponse re√ßue </button> <button onClick={() => toggleContactStatus(contact.id, 'booked')} className={`flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium transition-colors ${ contact.status === 'booked' ? 'bg-purple-500/20 text-purple-400' : 'bg-white/10 text-gray-600' }`} > <Phone className="w-3 h-3"/> Booking confirm√© </button> </div> </div> ))} </div> </div> ) : ( <div className="text-gray-600 text-center py-8"> Aucun contact √† suivre. Ajoute des contacts dans les √©tapes pr√©c√©dentes. </div> )} {/* Manual Complete Button */} <div className="flex justify-center pt-6"> <button onClick={onComplete} className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-gray-900 py-3 px-8 rounded-xl font-semibold transition-all duration-200 hover:scale-105 shadow-lg"> üéâ Terminer le guide </button> </div> </div> </GlassContainer> ) } 