'use client' import React, { useState } from 'react' import { GlassContainer } from './GlassContainer' import { Button } from './button' import { Upload, Image as ImageIcon, Sparkles, Instagram, Music, Eye, CheckCircle, Loader2, TrendingUp, Users, Calendar, Target, Zap, AlertCircle } from 'lucide-react' interface UploadedImage { file: File preview: string platform: 'instagram' | 'spotify' | 'tiktok' } interface AIAnalysis { platform: 'instagram' | 'spotify' | 'tiktok' summary: { followers?: number listeners?: number bio?: string recentContent?: string topCities?: string[] lastRelease?: string videoViews?: number } analysis: { strengths: string[] weaknesses: string[] } recommendations: string[] } interface GlobalAnalysis { overallScore: number keyInsights: string[] actionPlan: string[] nextSteps: string } export function AIProfileAnalysis() { const [uploadedImages, setUploadedImages] = useState<UploadedImage[]>([]) const [analyses, setAnalyses] = useState<AIAnalysis[]>([]) const [globalAnalysis, setGlobalAnalysis] = useState<GlobalAnalysis | null>(null) const [isAnalyzing, setIsAnalyzing] = useState(false) const [analyzingPlatform, setAnalyzingPlatform] = useState<string | null>(null) const [error, setError] = useState<string | null>(null) const platforms = [ { id: 'instagram', name: 'Instagram', icon: Instagram, color: 'from-pink-500 to-rose-500', description: 'Your DJ brand & visual content' }, { id: 'spotify', name: 'Spotify', icon: Music, color: 'from-green-500 to-emerald-500', description: 'Your music & listener stats' }, { id: 'tiktok', name: 'TikTok', icon: Eye, color: 'from-black to-gray-800', description: 'Your viral content & reach' } ] const handleFileUpload = (platform: 'instagram' | 'spotify' | 'tiktok', file: File) => { if (file.size > 10 * 1024 * 1024) { setError('File size must be less than 10MB') return } const reader = new FileReader() reader.onload = (e) => { const newImage: UploadedImage = { file, preview: e.target?.result as string, platform } setUploadedImages(prev => { const filtered = prev.filter(img => img.platform !== platform) return [...filtered, newImage] }) } reader.readAsDataURL(file) } const analyzeIndividualPlatform = async (platform: 'instagram' | 'spotify' | 'tiktok') => { const uploadedImage = uploadedImages.find(img => img.platform === platform) if (!uploadedImage) return setAnalyzingPlatform(platform) setError(null) try { // Convert image to base64 const base64 = await new Promise<string>((resolve) => { const reader = new FileReader() reader.onload = () => { const base64 = (reader.result as string).split(',')[1] resolve(base64) } reader.readAsDataURL(uploadedImage.file) }) // Call OpenAI API for individual analysis const response = await fetch('/api/analyze-profile', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ images: [{ platform, base64 }], analysisType: 'individual' }) }) if (!response.ok) { throw new Error('Failed to analyze profile') } const result = await response.json() // Update analyses with the new individual analysis setAnalyses(prev => { const filtered = prev.filter(analysis => analysis.platform !== platform) return [...filtered, result.analyses[0]] }) } catch (err) { setError(`Failed to analyze ${platform}. Please try again.`) console.error('Analysis error:', err) } finally { setAnalyzingPlatform(null) } } const analyzeAllPlatforms = async () => { if (uploadedImages.length < 2) { setError('Please upload at least 2 screenshots for global analysis') return } setIsAnalyzing(true) setError(null) try { // Convert images to base64 const imagePromises = uploadedImages.map(async (img) => { return new Promise<{ platform: string; base64: string }>((resolve) => { const reader = new FileReader() reader.onload = () => { const base64 = (reader.result as string).split(',')[1] resolve({ platform: img.platform, base64 }) } reader.readAsDataURL(img.file) }) }) const base64Images = await Promise.all(imagePromises) // Call OpenAI API for global analysis const response = await fetch('/api/analyze-profile', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ images: base64Images, analysisType: 'global' }) }) if (!response.ok) { throw new Error('Failed to analyze profiles') } const result = await response.json() setAnalyses(result.analyses) setGlobalAnalysis(result.globalAnalysis) } catch (err) { setError('Failed to analyze profiles. Please try again.') console.error('Analysis error:', err) } finally { setIsAnalyzing(false) } } const resetAnalysis = () => { setUploadedImages([]) setAnalyses([]) setGlobalAnalysis(null) setError(null) } const getUploadedImageForPlatform = (platform: string) => { return uploadedImages.find(img => img.platform === platform) } const getPlatformIcon = (platform: string) => { const platformData = platforms.find(p => p.id === platform) return platformData?.icon || ImageIcon } const getPlatformColor = (platform: string) => { const platformData = platforms.find(p => p.id === platform) return platformData?.color || 'from-gray-500 to-gray-600' } const getAnalysisForPlatform = (platform: string) => { return analyses.find(analysis => analysis.platform === platform) } return ( <GlassContainer className="p-8"> <div className="space-y-8"> {/* Header */} <div className="flex items-center justify-between"> <div className="flex items-center gap-4"> <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-violet-500 to-fuchsia-500 flex items-center justify-center"> <Sparkles className="w-6 h-6 text-white"/> </div> <div> <h2 className="text-2xl font-bold text-gray-900">AI Profile Analysis</h2> <p className="text-gray-600">Upload and analyze each platform individually or get a global analysis</p> </div> </div> {(analyses.length > 0 || uploadedImages.length > 0) && ( <Button variant="outline"onClick={resetAnalysis} className="bg-white/5"> Start Over </Button> )} </div> {/* Error Message */} {error && ( <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 flex items-center gap-3"> <AlertCircle className="w-5 h-5 text-red-500"/> <span className="text-red-500">{error}</span> </div> )} {/* Upload Section */} <div className="bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 rounded-lg p-4 border border-violet-500/20 mb-6"> <div className="flex items-start gap-3"> <div className="w-8 h-8 rounded-lg bg-violet-500/20 flex items-center justify-center flex-shrink-0"> <Sparkles className="w-4 h-4 text-violet-400"/> </div> <div> <h3 className="text-sm font-medium text-gray-900 mb-1">How it works</h3> <p className="text-xs text-gray-600"> Upload screenshots from your social media platforms. You can analyze each platform individually or get a comprehensive global analysis with multiple platforms. </p> </div> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> {platforms.map((platform) => { const uploadedImage = getUploadedImageForPlatform(platform.id) const analysis = getAnalysisForPlatform(platform.id) const Icon = platform.icon const isAnalyzing = analyzingPlatform === platform.id return ( <div key={platform.id} className="space-y-4"> <div className="text-center"> <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${platform.color} flex items-center justify-center mx-auto mb-3`}> <Icon className="w-8 h-8 text-white"/> </div> <h3 className="text-lg font-semibold text-gray-900">{platform.name}</h3> <p className="text-sm text-gray-600">{platform.description}</p> </div> <div className="relative"> {uploadedImage ? ( <div className="relative"> <img src={uploadedImage.preview} alt={`${platform.name} screenshot`} className="w-full h-48 object-cover rounded-lg border border-white/20"/> <div className="absolute top-2 right-2 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center"> <CheckCircle className="w-5 h-5 text-white"/> </div> </div> ) : ( <label className="block w-full h-48 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-violet-500 transition-colors"> <div className="flex flex-col items-center justify-center h-full"> <Upload className="w-8 h-8 text-gray-400 mb-2"/> <span className="text-sm text-gray-600">Upload Screenshot</span> </div> <input type="file"accept="image/*"className="hidden"onChange={(e) => { const file = e.target.files?.[0] if (file) { handleFileUpload(platform.id as 'instagram' | 'spotify' | 'tiktok', file) } }} /> </label> )} </div> {/* Individual Analysis Button */} {uploadedImage && !analysis && ( <Button onClick={() => analyzeIndividualPlatform(platform.id as 'instagram' | 'spotify' | 'tiktok')} disabled={isAnalyzing} className={`w-full bg-gradient-to-r ${platform.color} text-white disabled:opacity-50`} > {isAnalyzing ? ( <> <Loader2 className="w-4 h-4 mr-2 animate-spin"/> Analyzing... </> ) : ( <> <Sparkles className="w-4 h-4 mr-2"/> Analyze {platform.name} </> )} </Button> )} {/* Analysis Status */} {analysis && ( <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-3 text-center"> <CheckCircle className="w-5 h-5 text-green-500 mx-auto mb-1"/> <span className="text-sm text-green-500">Analysis completed</span> </div> )} </div> ) })} </div> {/* Global Analysis Button */} {uploadedImages.length >= 2 && ( <div className="text-center mt-8"> <Button onClick={analyzeAllPlatforms} disabled={isAnalyzing} className="bg-gradient-to-r from-violet-500 to-fuchsia-500 text-white px-8 py-3 text-lg disabled:opacity-50"> {isAnalyzing ? ( <> <Loader2 className="w-5 h-5 mr-2 animate-spin"/> Analyzing All Platforms... </> ) : ( <> <Sparkles className="w-5 h-5 mr-2"/> Global Analysis ({uploadedImages.length} platforms) </> )} </Button> <p className="text-sm text-gray-500 mt-2"> Get comprehensive insights across all your uploaded platforms </p> </div> )} {/* Analysis Results */} {analyses.length > 0 && ( <div className="space-y-8"> {/* Individual Platform Analyses */} <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> {analyses.map((analysis) => { const Icon = getPlatformIcon(analysis.platform) const colorClass = getPlatformColor(analysis.platform) return ( <div key={analysis.platform} className="bg-white/5 rounded-lg p-6 border border-white/10"> <div className="flex items-center gap-3 mb-4"> <div className={`w-10 h-10 rounded-lg bg-gradient-to-br ${colorClass} flex items-center justify-center`}> <Icon className="w-5 h-5 text-white"/> </div> <h3 className="text-lg font-semibold text-gray-900 capitalize">{analysis.platform}</h3> </div> {/* Summary */} <div className="space-y-3 mb-4"> {analysis.summary.followers && ( <div className="flex items-center gap-2"> <Users className="w-4 h-4 text-gray-500"/> <span className="text-sm text-gray-600">{analysis.summary.followers.toLocaleString()} followers</span> </div> )} {analysis.summary.listeners && ( <div className="flex items-center gap-2"> <Music className="w-4 h-4 text-gray-500"/> <span className="text-sm text-gray-600">{analysis.summary.listeners.toLocaleString()} monthly listeners</span> </div> )} {analysis.summary.bio && ( <p className="text-sm text-gray-600 italic">"{analysis.summary.bio}"</p> )} </div> {/* Recommendations */} <div className="space-y-2"> <h4 className="text-sm font-medium text-gray-900">Key Recommendations:</h4> <ul className="space-y-1"> {analysis.recommendations.slice(0, 3).map((rec, index) => ( <li key={index} className="text-xs text-gray-600 flex items-start gap-2"> <Target className="w-3 h-3 text-violet-500 mt-0.5 flex-shrink-0"/> {rec} </li> ))} </ul> </div> </div> ) })} </div> {/* Global Analysis */} {globalAnalysis && ( <div className="bg-gradient-to-br from-violet-500/10 to-fuchsia-500/10 rounded-lg p-8 border border-violet-500/20"> <div className="flex items-center gap-3 mb-6"> <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-violet-500 to-fuchsia-500 flex items-center justify-center"> <TrendingUp className="w-6 h-6 text-white"/> </div> <div> <h3 className="text-xl font-bold text-gray-900">Overall Profile Analysis</h3> <p className="text-gray-600">AI-powered insights and action plan</p> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div> <h4 className="text-lg font-semibold text-gray-900 mb-3">Key Insights</h4> <ul className="space-y-2"> {globalAnalysis.keyInsights.map((insight, index) => ( <li key={index} className="text-sm text-gray-600 flex items-start gap-2"> <Zap className="w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0"/> {insight} </li> ))} </ul> </div> <div> <h4 className="text-lg font-semibold text-gray-900 mb-3">Action Plan</h4> <ul className="space-y-2"> {globalAnalysis.actionPlan.map((action, index) => ( <li key={index} className="text-sm text-gray-600 flex items-start gap-2"> <Target className="w-4 h-4 text-violet-500 mt-0.5 flex-shrink-0"/> {action} </li> ))} </ul> </div> </div> <div className="mt-6 p-4 bg-white/5 rounded-lg border border-white/10"> <h4 className="text-sm font-medium text-gray-900 mb-2">Next Steps</h4> <p className="text-sm text-gray-600">{globalAnalysis.nextSteps}</p> </div> </div> )} </div> )} </div> </GlassContainer> ) } 