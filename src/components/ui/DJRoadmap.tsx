'use client' import { useState, useEffect } from 'react' import { motion, AnimatePresence } from 'framer-motion' import { GlassContainer } from './GlassContainer' import Badge from './badge' import { CheckCircle, Circle, Star, Trophy, Target, Zap, Award, TrendingUp, MapPin, Music, Headphones, Mic, Volume2, Play, Pause, SkipForward } from 'lucide-react' interface DJRoadmapProps { completedMissions: Set<string> totalMissions: number djLevel: string totalXP: number } interface RoadmapMilestone { id: string title: string description: string requiredMissions: number icon: React.ReactNode color: string position: { x: number; y: number } unlocked: boolean } const levelAvatars = { beginner: 'ðŸŽ§', intermediate: 'ðŸŽµ', advanced: 'ðŸŽ¤', professional: 'ðŸ”¥' } const milestoneIcons = { setup: <Headphones className="w-6 h-6"/>, basics: <Music className="w-6 h-6"/>, mixing: <Volume2 className="w-6 h-6"/>, performance: <Mic className="w-6 h-6"/>, marketing: <TrendingUp className="w-6 h-6"/>, networking: <MapPin className="w-6 h-6"/>, mastery: <Trophy className="w-6 h-6"/>, legend: <Star className="w-6 h-6"/> } export function DJRoadmap({ completedMissions, totalMissions, djLevel, totalXP }: DJRoadmapProps) { const [currentMilestone, setCurrentMilestone] = useState(0) const [animationPhase, setAnimationPhase] = useState('idle') const completedCount = completedMissions.size const progressPercentage = (completedCount / totalMissions) * 100 const milestones: RoadmapMilestone[] = [ { id: 'start', title: 'DJ Journey Begins', description: 'Welcome to your DJ adventure!', requiredMissions: 0, icon: <Play className="w-6 h-6"/>, color: 'from-green-500 to-emerald-600', position: { x: 10, y: 90 }, unlocked: true }, { id: 'setup', title: 'Setup Complete', description: 'Equipment and workspace ready', requiredMissions: 3, icon: milestoneIcons.setup, color: 'from-blue-500 to-cyan-600', position: { x: 25, y: 70 }, unlocked: completedCount >= 3 }, { id: 'basics', title: 'Basic Skills', description: 'Fundamental techniques mastered', requiredMissions: 8, icon: milestoneIcons.basics, color: 'from-purple-500 to-violet-600', position: { x: 40, y: 50 }, unlocked: completedCount >= 8 }, { id: 'mixing', title: 'Mixing Master', description: 'Seamless transitions achieved', requiredMissions: 15, icon: milestoneIcons.mixing, color: 'from-orange-500 to-red-600', position: { x: 55, y: 30 }, unlocked: completedCount >= 15 }, { id: 'performance', title: 'Live Performance', description: 'Ready for the stage', requiredMissions: 20, icon: milestoneIcons.performance, color: 'from-pink-500 to-rose-600', position: { x: 70, y: 20 }, unlocked: completedCount >= 20 }, { id: 'marketing', title: 'Brand Building', description: 'Professional presence established', requiredMissions: 25, icon: milestoneIcons.marketing, color: 'from-indigo-500 to-blue-600', position: { x: 85, y: 40 }, unlocked: completedCount >= 25 }, { id: 'mastery', title: 'DJ Mastery', description: 'Expert level achieved', requiredMissions: 30, icon: milestoneIcons.mastery, color: 'from-yellow-500 to-amber-600', position: { x: 90, y: 10 }, unlocked: completedCount >= 30 } ] // Calculate current milestone based on progress useEffect(() => { const currentIndex = milestones.findIndex((milestone, index) => { const nextMilestone = milestones[index + 1] return milestone.unlocked && (!nextMilestone || !nextMilestone.unlocked) }) setCurrentMilestone(Math.max(0, currentIndex)) }, [completedCount]) // Calculate avatar position based on progress const getAvatarPosition = () => { if (milestones.length === 0) return { x: 10, y: 90 } const currentMs = milestones[currentMilestone] const nextMs = milestones[currentMilestone + 1] if (!nextMs) return currentMs.position const progressToNext = Math.min( (completedCount - currentMs.requiredMissions) / (nextMs.requiredMissions - currentMs.requiredMissions), 1 ) return { x: currentMs.position.x + (nextMs.position.x - currentMs.position.x) * progressToNext, y: currentMs.position.y + (nextMs.position.y - currentMs.position.y) * progressToNext } } const avatarPosition = getAvatarPosition() // Generate path between milestones const generatePath = () => { if (milestones.length < 2) return '' let path = `M ${milestones[0].position.x} ${milestones[0].position.y}` for (let i = 1; i < milestones.length; i++) { const current = milestones[i] const prev = milestones[i - 1] // Create a smooth curve between points const controlX = (prev.position.x + current.position.x) / 2 const controlY = Math.min(prev.position.y, current.position.y) - 10 path += ` Q ${controlX} ${controlY} ${current.position.x} ${current.position.y}` } return path } const pathData = generatePath() return ( <GlassContainer className="p-8"> <div className="mb-6"> <h3 className="text-2xl font-bold text-gray-900 mb-2"> Your DJ Journey </h3> <p className="text-gray-600"> Follow your avatar's progress through the DJ mastery roadmap </p> </div> {/* Progress Stats */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8"> <div className="text-center p-4 bg-white/50 rounded-lg"> <div className="text-2xl font-bold text-gray-900">{completedCount}</div> <div className="text-sm text-gray-600">Completed</div> </div> <div className="text-center p-4 bg-white/50 rounded-lg"> <div className="text-2xl font-bold text-gray-900">{totalMissions}</div> <div className="text-sm text-gray-600">Total Missions</div> </div> <div className="text-center p-4 bg-white/50 rounded-lg"> <div className="text-2xl font-bold text-gray-900">{progressPercentage.toFixed(1)}%</div> <div className="text-sm text-gray-600">Progress</div> </div> <div className="text-center p-4 bg-white/50 rounded-lg"> <div className="text-2xl font-bold text-gray-900">{totalXP.toLocaleString()}</div> <div className="text-sm text-gray-600">Total XP</div> </div> </div> {/* Roadmap Visualization */} <div className="relative h-96 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl overflow-hidden"> {/* Background Grid */} <div className="absolute inset-0 opacity-10"> <svg width="100%"height="100%"> <defs> <pattern id="grid"width="20"height="20"patternUnits="userSpaceOnUse"> <path d="M 20 0 L 0 0 0 20"fill="none"stroke="currentColor"strokeWidth="1"/> </pattern> </defs> <rect width="100%"height="100%"fill="url(#grid)"/> </svg> </div> {/* Roadmap Path */} <svg className="absolute inset-0 w-full h-full"> <defs> <linearGradient id="pathGradient"x1="0%"y1="0%"x2="100%"y2="0%"> <stop offset="0%"stopColor="#10b981"/> <stop offset="50%"stopColor="#3b82f6"/> <stop offset="100%"stopColor="#8b5cf6"/> </linearGradient> </defs> {/* Main path */} <path d={pathData} fill="none"stroke="url(#pathGradient)"strokeWidth="4"strokeDasharray="10,5"className="animate-pulse"/> {/* Progress overlay */} <path d={pathData} fill="none"stroke="#10b981"strokeWidth="6"strokeDasharray={`${progressPercentage * 10} ${(100 - progressPercentage) * 10}`} className="drop-shadow-lg"/> </svg> {/* Milestones */} {milestones.map((milestone, index) => ( <motion.div key={milestone.id} className="absolute transform -translate-x-1/2 -translate-y-1/2"style={{ left: `${milestone.position.x}%`, top: `${milestone.position.y}%` }} initial={{ scale: 0, opacity: 0 }} animate={{ scale: milestone.unlocked ? 1 : 0.7, opacity: milestone.unlocked ? 1 : 0.5 }} transition={{ delay: index * 0.1 }} > <div className={`relative w-16 h-16 rounded-full bg-gradient-to-r ${milestone.color} flex items-center justify-center shadow-lg ${ milestone.unlocked ? 'ring-4 ring-white/30' : '' }`}> <div className="text-white"> {milestone.unlocked ? milestone.icon : <Circle className="w-6 h-6"/>} </div> {milestone.unlocked && ( <div className="absolute -top-2 -right-2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center"> <CheckCircle className="w-4 h-4 text-white"/> </div> )} </div> <div className="absolute top-full mt-2 left-1/2 transform -translate-x-1/2 text-center"> <div className="text-sm font-semibold text-gray-900 whitespace-nowrap"> {milestone.title} </div> <div className="text-xs text-gray-600 whitespace-nowrap"> {milestone.requiredMissions} missions </div> </div> </motion.div> ))} {/* Animated Avatar */} <motion.div className="absolute transform -translate-x-1/2 -translate-y-1/2 z-10"style={{ left: `${avatarPosition.x}%`, top: `${avatarPosition.y}%` }} animate={{ x: [0, -2, 2, 0], y: [0, -1, 1, 0] }} transition={{ duration: 2, repeat: Infinity, repeatType:"reverse"}} > <div className="relative"> <div className="w-12 h-12 bg-gradient-to-r from-violet-500 to-purple-600 rounded-full flex items-center justify-center text-2xl shadow-xl ring-4 ring-white/30"> {levelAvatars[djLevel as keyof typeof levelAvatars] || 'ðŸŽ§'} </div> {/* Floating XP indicator */} <motion.div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-yellow-400 text-yellow-900 px-2 py-1 rounded-full text-xs font-bold"animate={{ y: [0, -5, 0], opacity: [1, 0.8, 1] }} transition={{ duration: 1.5, repeat: Infinity, repeatType:"reverse"}} > {totalXP} XP </motion.div> </div> </motion.div> {/* Particle Effects */} <div className="absolute inset-0 pointer-events-none"> {[...Array(20)].map((_, i) => ( <motion.div key={i} className="absolute w-2 h-2 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full"style={{ left: `${Math.random() * 100}%`, top: `${Math.random() * 100}%` }} animate={{ opacity: [0, 1, 0], scale: [0, 1, 0], y: [0, -20, 0] }} transition={{ duration: 3, repeat: Infinity, delay: i * 0.2 }} /> ))} </div> </div> {/* Current Milestone Info */} <div className="mt-6 p-4 bg-white/50 rounded-lg"> <div className="flex items-center space-x-4"> <div className={`w-12 h-12 rounded-full bg-gradient-to-r ${milestones[currentMilestone]?.color} flex items-center justify-center`}> {milestones[currentMilestone]?.icon} </div> <div> <h4 className="font-semibold text-gray-900"> {milestones[currentMilestone]?.title} </h4> <p className="text-sm text-gray-600"> {milestones[currentMilestone]?.description} </p> </div> </div> </div> </GlassContainer> ) } 