'use client' import { useState } from 'react' import { TrendingUp, TrendingDown, Instagram as InstagramIcon, Music2, Calendar, Pencil, Video } from 'lucide-react' import { GlassContainer } from './GlassContainer' import { SectionTitle } from './SectionTitle' interface UserStats { followersInsta: number followersTiktok: number spotifyListeners: number monthlyGigs: number previousStats?: { followersInsta: number followersTiktok: number spotifyListeners: number monthlyGigs: number } } interface UserStatsCardProps extends UserStats { onUpdate?: (stats: UserStats) => void } export function UserStatsCard({ followersInsta, followersTiktok, spotifyListeners, monthlyGigs, previousStats, onUpdate }: UserStatsCardProps) { const [isEditing, setIsEditing] = useState(false) const [newStats, setNewStats] = useState({ followersInsta, followersTiktok, spotifyListeners, monthlyGigs }) const handleSubmit = (e: React.FormEvent) => { e.preventDefault() onUpdate?.(newStats) setIsEditing(false) } const StatItem = ({ icon: Icon, label, value, previousValue, color = 'purple' }: { icon: typeof InstagramIcon label: string value: number previousValue?: number color?: 'purple' | 'blue' | 'pink' | 'green' }) => { const diff = previousValue ? value - previousValue : 0 const showTrend = previousValue !== undefined const colorClasses = { purple: 'bg-purple-500/10 text-purple-400', blue: 'bg-blue-500/10 text-blue-400', pink: 'bg-pink-500/10 text-pink-400', green: 'bg-green-500/10 text-green-400' } return ( <div className="bg-[#1c1c1c] p-6 rounded-xl border border-white/10"> <div className="flex items-center gap-4"> <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${colorClasses[color]}`}> <Icon className="w-5 h-5"/> </div> <div className="flex-1"> <h3 className="text-gray-900 font-semibold">{label}</h3> <div className="flex items-center gap-3 mt-1"> <p className="text-2xl font-bold text-gray-900">{value.toLocaleString()}</p> {showTrend && ( <div className={`flex items-center gap-1 text-sm ${ diff >= 0 ? 'text-green-400' : 'text-red-400' }`}> {diff >= 0 ? ( <TrendingUp className="w-4 h-4"/> ) : ( <TrendingDown className="w-4 h-4"/> )} <span className="font-semibold">{Math.abs(diff).toLocaleString()}</span> </div> )} </div> </div> </div> </div> ) } if (isEditing) { return ( <GlassContainer> <form onSubmit={handleSubmit} className="space-y-6"> <SectionTitle> Mettre Ã  jour tes stats </SectionTitle> <p className="text-gray-600 mb-6">Entre tes nouvelles statistiques</p> <div className="space-y-4"> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-gray-900 font-semibold mb-2"> Instagram followers </label> <input type="number"value={newStats.followersInsta} onChange={e => setNewStats(s => ({ ...s, followersInsta: parseInt(e.target.value) }))} className="w-full px-4 py-3 rounded-lg bg-[#1c1c1c] border border-white/10 text-gray-900 focus:outline-none focus:border-purple-500"/> </div> <div> <label className="block text-gray-900 font-semibold mb-2"> TikTok followers </label> <input type="number"value={newStats.followersTiktok} onChange={e => setNewStats(s => ({ ...s, followersTiktok: parseInt(e.target.value) }))} className="w-full px-4 py-3 rounded-lg bg-[#1c1c1c] border border-white/10 text-gray-900 focus:outline-none focus:border-purple-500"/> </div> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-gray-900 font-semibold mb-2"> Spotify listeners </label> <input type="number"value={newStats.spotifyListeners} onChange={e => setNewStats(s => ({ ...s, spotifyListeners: parseInt(e.target.value) }))} className="w-full px-4 py-3 rounded-lg bg-[#1c1c1c] border border-white/10 text-gray-900 focus:outline-none focus:border-purple-500"/> </div> <div> <label className="block text-gray-900 font-semibold mb-2"> Gigs ce mois-ci </label> <input type="number"value={newStats.monthlyGigs} onChange={e => setNewStats(s => ({ ...s, monthlyGigs: parseInt(e.target.value) }))} className="w-full px-4 py-3 rounded-lg bg-[#1c1c1c] border border-white/10 text-gray-900 focus:outline-none focus:border-purple-500"/> </div> </div> </div> <div className="flex justify-end gap-3"> <button type="button"onClick={() => setIsEditing(false)} className="px-6 py-3 rounded-lg text-gray-900 hover:bg-white/5 transition-colors"> Annuler </button> <button type="submit"className="px-6 py-3 rounded-lg bg-purple-500 text-gray-900 font-semibold hover:bg-purple-600 transition-colors"> Sauvegarder </button> </div> </form> </GlassContainer> ) } return ( <GlassContainer> <div className="flex items-center justify-between mb-6"> <div> <SectionTitle> ðŸ“Š Tes Stats DJ </SectionTitle> <p className="text-gray-600">DerniÃ¨re mise Ã  jour : aujourd'hui</p> </div> <button onClick={() => setIsEditing(true)} className="p-2 rounded-lg hover:bg-white/5 transition-colors"> <Pencil className="w-5 h-5 text-gray-900"/> </button> </div> <div className="grid grid-cols-1 gap-4"> <StatItem icon={InstagramIcon} label="Instagram followers"value={followersInsta} previousValue={previousStats?.followersInsta} color="pink"/> <StatItem icon={Video} label="TikTok followers"value={followersTiktok} previousValue={previousStats?.followersTiktok} color="purple"/> <StatItem icon={Music2} label="Spotify listeners"value={spotifyListeners} previousValue={previousStats?.spotifyListeners} color="green"/> <StatItem icon={Calendar} label="Gigs ce mois-ci"value={monthlyGigs} previousValue={previousStats?.monthlyGigs} color="blue"/> </div> </GlassContainer> ) } 