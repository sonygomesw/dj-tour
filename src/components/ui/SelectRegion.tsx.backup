import { useState } from 'react' import { Check, ChevronDown, Globe } from 'lucide-react' import { GlassContainer } from './GlassContainer' const continents = { europe: { name: 'Europe', countries: [ { id: 'fr', name: 'France', cities: ['Paris', 'Lyon', 'Marseille', 'Bordeaux', 'Toulouse', 'Nantes', 'Strasbourg', 'Montpellier', 'Lille', 'Rennes'] }, { id: 'es', name: 'Espagne', cities: ['Barcelone', 'Madrid', 'Ibiza', 'Valencia', 'Malaga', 'Séville', 'Bilbao', 'Palma', 'Las Palmas'] }, { id: 'uk', name: 'Royaume-Uni', cities: ['Londres', 'Manchester', 'Liverpool', 'Bristol', 'Glasgow', 'Edinburgh', 'Birmingham', 'Leeds'] }, { id: 'de', name: 'Allemagne', cities: ['Berlin', 'Hamburg', 'Munich', 'Cologne', 'Frankfurt', 'Stuttgart', 'Düsseldorf', 'Dortmund'] }, { id: 'it', name: 'Italie', cities: ['Rome', 'Milan', 'Naples', 'Turin', 'Florence', 'Bologne', 'Venise', 'Palerme'] }, { id: 'nl', name: 'Pays-Bas', cities: ['Amsterdam', 'Rotterdam', 'La Haye', 'Utrecht', 'Eindhoven', 'Groningen'] }, { id: 'be', name: 'Belgique', cities: ['Bruxelles', 'Anvers', 'Gand', 'Charleroi', 'Liège', 'Bruges'] }, { id: 'ch', name: 'Suisse', cities: ['Zurich', 'Genève', 'Bâle', 'Berne', 'Lausanne'] }, { id: 'pt', name: 'Portugal', cities: ['Lisbonne', 'Porto', 'Braga', 'Coimbra', 'Funchal'] }, { id: 'at', name: 'Autriche', cities: ['Vienne', 'Salzburg', 'Innsbruck', 'Graz', 'Linz'] } ] }, america: { name: 'Amérique', countries: [ { id: 'us', name: 'États-Unis', cities: ['New York', 'Los Angeles', 'Chicago', 'Miami', 'Las Vegas', 'San Francisco', 'Boston', 'Atlanta', 'Detroit', 'Seattle'] }, { id: 'ca', name: 'Canada', cities: ['Toronto', 'Vancouver', 'Montréal', 'Calgary', 'Ottawa', 'Edmonton'] }, { id: 'mx', name: 'Mexique', cities: ['Mexico City', 'Guadalajara', 'Monterrey', 'Cancún', 'Tijuana'] }, { id: 'br', name: 'Brésil', cities: ['São Paulo', 'Rio de Janeiro', 'Salvador', 'Brasília', 'Fortaleza'] }, { id: 'ar', name: 'Argentine', cities: ['Buenos Aires', 'Córdoba', 'Rosario', 'Mendoza', 'Mar del Plata'] }, { id: 'co', name: 'Colombie', cities: ['Bogotá', 'Medellín', 'Cali', 'Barranquilla', 'Cartagena'] } ] }, asia: { name: 'Asie', countries: [ { id: 'jp', name: 'Japon', cities: ['Tokyo', 'Osaka', 'Kyoto', 'Yokohama', 'Nagoya', 'Sapporo'] }, { id: 'cn', name: 'Chine', cities: ['Shanghai', 'Pékin', 'Guangzhou', 'Shenzhen', 'Chengdu'] }, { id: 'kr', name: 'Corée du Sud', cities: ['Séoul', 'Busan', 'Incheon', 'Daegu', 'Daejeon'] }, { id: 'th', name: 'Thaïlande', cities: ['Bangkok', 'Chiang Mai', 'Phuket', 'Pattaya', 'Krabi'] }, { id: 'sg', name: 'Singapour', cities: ['Singapour'] }, { id: 'hk', name: 'Hong Kong', cities: ['Hong Kong'] }, { id: 'in', name: 'Inde', cities: ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata', 'Pune'] } ] }, oceania: { name: 'Océanie', countries: [ { id: 'au', name: 'Australie', cities: ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Gold Coast'] }, { id: 'nz', name: 'Nouvelle-Zélande', cities: ['Auckland', 'Wellington', 'Christchurch', 'Hamilton'] } ] }, africa: { name: 'Afrique', countries: [ { id: 'za', name: 'Afrique du Sud', cities: ['Le Cap', 'Johannesburg', 'Durban', 'Pretoria', 'Port Elizabeth'] }, { id: 'ma', name: 'Maroc', cities: ['Casablanca', 'Rabat', 'Marrakech', 'Fès', 'Tanger'] }, { id: 'eg', name: 'Égypte', cities: ['Le Caire', 'Alexandrie', 'Gizeh', 'Louxor', 'Assouan'] }, { id: 'ng', name: 'Nigeria', cities: ['Lagos', 'Abuja', 'Kano', 'Ibadan', 'Port Harcourt'] }, { id: 'ke', name: 'Kenya', cities: ['Nairobi', 'Mombasa', 'Kisumu', 'Nakuru'] } ] } } interface SelectRegionProps { onComplete: (country: string, city: string) => void } export function SelectRegion({ onComplete }: SelectRegionProps) { const [selectedContinent, setSelectedContinent] = useState('') const [selectedCountry, setSelectedCountry] = useState('') const [selectedCity, setSelectedCity] = useState('') const [customCity, setCustomCity] = useState('') const handleContinentChange = (continentId: string) => { setSelectedContinent(continentId) setSelectedCountry('') setSelectedCity('') setCustomCity('') } const handleCountryChange = (countryId: string) => { setSelectedCountry(countryId) setSelectedCity('') setCustomCity('') } const handleCityChange = (city: string) => { setSelectedCity(city) setCustomCity('') const country = continents[selectedContinent as keyof typeof continents]?.countries.find(c => c.id === selectedCountry)?.name || '' onComplete(country, city) } const handleCustomCityChange = (city: string) => { setCustomCity(city) setSelectedCity('') if (city.trim()) { const country = continents[selectedContinent as keyof typeof continents]?.countries.find(c => c.id === selectedCountry)?.name || '' onComplete(country, city.trim()) } } return ( <GlassContainer className="p-8"> <div className="space-y-8"> {/* Continent Selection */} <div> <div className="flex items-center gap-3 mb-4"> <div className="p-2 rounded-lg bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 border border-white/10"> <Globe className="w-5 h-5 text-violet-400"/> </div> <h3 className="text-lg font-semibold text-gray-900"> Choisis le continent </h3> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {Object.entries(continents).map(([continentId, continent]) => ( <button key={continentId} onClick={() => handleContinentChange(continentId)} className={`group p-6 rounded-2xl border transition-all duration-300 ${ selectedContinent === continentId ? 'border-violet-500 bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 shadow-lg shadow-violet-500/20' : 'border-white/10 hover:border-white/20 hover:bg-white/5' }`} > <span className="text-gray-900 font-medium text-lg group-hover:text-violet-300 transition-colors"> {continent.name} </span> </button> ))} </div> </div> {/* Country Selection */} {selectedContinent && ( <div> <div className="flex items-center gap-3 mb-4"> <div className="p-2 rounded-lg bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 border border-white/10"> <Globe className="w-5 h-5 text-violet-400"/> </div> <h3 className="text-lg font-semibold text-gray-900"> Choisis le pays </h3> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {continents[selectedContinent as keyof typeof continents]?.countries.map((country) => ( <button key={country.id} onClick={() => handleCountryChange(country.id)} className={`group p-5 rounded-xl border transition-all duration-300 ${ selectedCountry === country.id ? 'border-violet-500 bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 shadow-lg shadow-violet-500/20' : 'border-white/10 hover:border-white/20 hover:bg-white/5' }`} > <span className="text-gray-900 font-medium group-hover:text-violet-300 transition-colors"> {country.name} </span> </button> ))} </div> </div> )} {/* City Selection */} {selectedCountry && ( <div> <div className="flex items-center gap-3 mb-4"> <div className="p-2 rounded-lg bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 border border-white/10"> <Globe className="w-5 h-5 text-violet-400"/> </div> <h3 className="text-lg font-semibold text-gray-900"> Choisis ta ville </h3> </div> <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3"> {continents[selectedContinent as keyof typeof continents]?.countries .find((c) => c.id === selectedCountry) ?.cities.map((city) => ( <button key={city} onClick={() => handleCityChange(city)} className={`group p-4 rounded-xl border transition-all duration-300 ${ selectedCity === city ? 'border-violet-500 bg-gradient-to-r from-violet-500/20 to-fuchsia-500/20 shadow-lg shadow-violet-500/20' : 'border-white/10 hover:border-white/20 hover:bg-white/5' }`} > <span className="text-gray-900 font-medium text-sm group-hover:text-violet-300 transition-colors"> {city} </span> </button> ))} </div> {/* Custom City Input */} <div className="mt-6"> <label className="block text-sm font-medium text-gray-600 mb-3"> Ou écris le nom de ta ville </label> <input type="text"placeholder="Ex: Nice, Montpellier, Cannes..."value={customCity} onChange={(e) => handleCustomCityChange(e.target.value)} className="w-full bg-white/5 border border-white/10 rounded-xl py-4 px-6 text-gray-900 placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50 transition-all duration-300"/> </div> </div> )} </div> </GlassContainer> ) } 