'use client' import React, { useState, useEffect } from 'react' import { CheckCircle, XCircle, Info, AlertCircle } from 'lucide-react' interface ToastProps { message: string type: 'success' | 'error' | 'info' | 'warning' duration?: number onClose: () => void } export function Toast({ message, type, duration = 3000, onClose }: ToastProps) { const [isVisible, setIsVisible] = useState(true) useEffect(() => { const timer = setTimeout(() => { setIsVisible(false) setTimeout(onClose, 300) // Attendre la fin de l'animation }, duration) return () => clearTimeout(timer) }, [duration, onClose]) const getIcon = () => { switch (type) { case 'success': return <CheckCircle className="w-5 h-5 text-green-500"/> case 'error': return <XCircle className="w-5 h-5 text-red-500"/> case 'warning': return <AlertCircle className="w-5 h-5 text-orange-500"/> default: return <Info className="w-5 h-5 text-blue-500"/> } } const getBackgroundColor = () => { switch (type) { case 'success': return 'bg-green-50 border-green-200' case 'error': return 'bg-red-50 border-red-200' case 'warning': return 'bg-orange-50 border-orange-200' default: return 'bg-blue-50 border-blue-200' } } return ( <div className={`fixed top-4 right-4 z-50 flex items-center gap-3 px-4 py-3 rounded-lg border shadow-lg transition-all duration-300 ${ isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-2' } ${getBackgroundColor()}`} > {getIcon()} <span className="text-sm font-medium text-gray-800">{message}</span> <button onClick={() => { setIsVisible(false) setTimeout(onClose, 300) }} className="ml-2 text-gray-400 hover:text-gray-600 transition-colors"> <XCircle className="w-4 h-4"/> </button> </div> ) } // Hook pour g√©rer les toasts export function useToast() { const [toasts, setToasts] = useState<Array<{ id: string message: string type: 'success' | 'error' | 'info' | 'warning' duration?: number }>>([]) const showToast = (message: string, type: 'success' | 'error' | 'info' | 'warning' = 'info', duration?: number) => { const id = Date.now().toString() setToasts(prev => [...prev, { id, message, type, duration }]) } const removeToast = (id: string) => { setToasts(prev => prev.filter(toast => toast.id !== id)) } const ToastContainer = () => ( <div className="fixed top-4 right-4 z-50 space-y-2"> {toasts.map(toast => ( <Toast key={toast.id} message={toast.message} type={toast.type} duration={toast.duration} onClose={() => removeToast(toast.id)} /> ))} </div> ) return { showToast, ToastContainer } } 