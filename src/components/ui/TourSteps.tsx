import { useState } from 'react' import { X } from 'lucide-react' import { SelectRegion } from './SelectRegion' import { ClubListBuilder } from './ClubListBuilder' import { ContactFinder } from './ContactFinder' import { EmailTemplateBlock } from './EmailTemplateBlock' import { EmailTracker } from './EmailTracker' import { StepProgress } from './StepProgress' import { GlassContainer } from './GlassContainer' import Image from 'next/image' import { useContact } from '../../contexts/ContactContext' interface TourStepsProps { onClose: () => void } export function TourSteps({ onClose }: TourStepsProps) { const [currentStep, setCurrentStep] = useState(1) const [completedSteps, setCompletedSteps] = useState<number[]>([]) const [stepData, setStepData] = useState<{ region?: { country: string; city: string } clubs?: any[] }>({}) const { contacts } = useContact() const steps = [ { id: 1, title: 'Choose your country or geographic area', description: 'Select the region where you want to play to target the right clubs.', completed: completedSteps.includes(1), current: currentStep === 1 }, { id: 2, title: 'Identifie les nightclubs qui bookent', description: 'Find at least 20 clubs that match your style.', completed: completedSteps.includes(2), current: currentStep === 2 }, { id: 3, title: 'Trouve les bons contacts', description: 'Identifie les personnes qui peuvent te booker (5-10 contacts minimum).', completed: completedSteps.includes(3), current: currentStep === 3 }, { id: 4, title: 'Prepare your message', description: 'Create a catchy and personalized message with your press kit.', completed: completedSteps.includes(4), current: currentStep === 4 }, { id: 5, title: 'Envoie tes messages', description: 'Lance ta campagne de contact (objectif : 100 clubs).', completed: completedSteps.includes(5), current: currentStep === 5 } ] const handleStepComplete = (step: number) => { if (!completedSteps.includes(step)) { setCompletedSteps([...completedSteps, step]) } setCurrentStep(step + 1) } return ( <GlassContainer className="relative max-w-2xl mx-auto rounded-[28px] overflow-hidden shadow-2xl border-white/20 hover:shadow-[0_8px_40px_rgba(167,139,250,0.35)] transition-shadow duration-200"> {/* Premium SVG Illustration with more depth */} <div className="absolute left-1/2 -translate-x-1/2 -top-16 z-10"> <svg width="140"height="140"viewBox="0 0 140 140"fill="none"xmlns="http://www.w3.org/2000/svg"> <ellipse cx="70"cy="70"rx="65"ry="65"fill="url(#paint0_radial)"fillOpacity="0.4"/> <ellipse cx="90"cy="30"rx="25"ry="25"fill="url(#paint1_radial)"fillOpacity="0.25"/> <defs> <radialGradient id="paint0_radial"cx="0"cy="0"r="1"gradientTransform="translate(70 70) rotate(90) scale(65)"gradientUnits="userSpaceOnUse"> <stop stopColor="#A78BFA"/> <stop offset="1"stopColor="#4C1D95"stopOpacity="0.2"/> </radialGradient> <radialGradient id="paint1_radial"cx="0"cy="0"r="1"gradientTransform="translate(90 30) rotate(90) scale(25)"gradientUnits="userSpaceOnUse"> <stop stopColor="#F472B6"/> <stop offset="1"stopColor="#A78BFA"stopOpacity="0.1"/> </radialGradient> </defs> </svg> </div> {/* Header */} <div className="relative h-16 flex items-center justify-center border-b border-white/10 bg-white/5 z-10"> <button onClick={onClose} className="absolute left-4 text-gray-600 hover:text-gray-900 transition-colors"> <X className="w-5 h-5"/> </button> <div className="flex items-center gap-2"> <Image src="/DJSNAKE.jpg"alt="DJ Tour"width={28} height={28} className="rounded-md"/> <span className="text-gray-900 font-bold text-lg tracking-wide">DJ Tour</span> </div> </div> {/* Content */} <div className="p-10 pt-16 z-10 relative"> {/* Step Progress */} <div className="mb-10"> <StepProgress steps={steps} /> </div> {/* Step Content */} <div className="space-y-8"> {currentStep === 1 && ( <SelectRegion onComplete={(country, city) => { setStepData({ ...stepData, region: { country, city } }) handleStepComplete(1) }} /> )} {currentStep === 2 && ( <ClubListBuilder onComplete={(clubs) => { setStepData({ ...stepData, clubs }) handleStepComplete(2) }} minClubs={20} /> )} {currentStep === 3 && ( <ContactFinder onComplete={() => handleStepComplete(3)} minContacts={5} clubs={stepData.clubs || []} region={stepData.region} /> )} {currentStep === 4 && ( <EmailTemplateBlock onComplete={() => handleStepComplete(4)} region={stepData.region} /> )} {currentStep === 5 && ( <EmailTracker onComplete={() => handleStepComplete(5)} targetEmails={100} /> )} {currentStep > 5 && ( <div className="text-center py-8"> <h2 className="text-4xl font-bold bg-gradient-to-br from-primary via-fuchsia-400 to-primary-darker text-transparent bg-clip-text mb-6 drop-shadow-xl"> Congratulations! </h2> <p className="text-gray-700 mb-8 text-lg"> You have completed all the steps to launch your tour.<br />Keep following up with your contacts and don't forget to follow up regularly. </p> <button onClick={() => setCurrentStep(5)} className="bg-white/10 hover:bg-white/20 text-gray-900 py-3 px-6 rounded-xl font-semibold transition-colors hover:scale-105 transition-transform duration-200"> Retour au suivi des contacts </button> </div> )} </div> </div> {/* Footer */} <div className="p-8 border-t border-white/10 bg-white/5 z-10"> <div className="flex justify-between items-center"> <button onClick={() => currentStep > 1 && setCurrentStep(currentStep - 1)} className={`text-base font-semibold ${ currentStep > 1 ? 'text-gray-900 hover:text-gray-700' : 'text-gray-400' } transition-colors`} > Previous step </button> <button onClick={() => { if (currentStep === steps.length) { // Si on est à la dernière étape, on termine handleStepComplete(currentStep) } else if (currentStep < steps.length) { // Sinon on passe à l'étape suivante handleStepComplete(currentStep) } }} className="bg-gradient-to-r from-primary to-primary-darker text-gray-900 py-3 px-8 rounded-xl text-base font-bold shadow-lg hover:scale-105 active:scale-95 transition-all duration-200"> {currentStep === steps.length ? 'Finish' : 'Next step'} </button> </div> </div> </GlassContainer> ) } 