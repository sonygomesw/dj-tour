'use client' import { useState } from 'react' import { useRouter } from 'next/navigation' import { supabase } from '@/lib/supabase' import { GlassContainer } from '@/components/ui/GlassContainer' import { Button } from '@/components/ui/button' import { ImageUpload } from '@/components/ui/ImageUpload' import { Music, MapPin, Globe, Instagram, Video, Loader, Music2, Users } from 'lucide-react' export default function OnboardingPage() { const router = useRouter() const [loading, setLoading] = useState(false) const [formData, setFormData] = useState({ // Informations de base dj_name: '', location: '', bio: '', website: '', avatar_url: '', // Social media spotify: '', instagram: '', tiktok: '', // Statistiques initiales spotify_listeners: 0, instagram_followers: 0, tiktok_followers: 0, // Niveau et Points level: 'Level 1 - Beginner DJ', points: 0, max_points: 1000 }) const handleImageUpload = async (file: File) => { try { const { data: { user } } = await supabase.auth.getUser() if (!user) throw new Error('No user') const fileExt = file.name.split('.').pop() const filePath = `${user.id}/avatar.${fileExt}` const { error: uploadError } = await supabase.storage .from('avatars') .upload(filePath, file, { upsert: true }) if (uploadError) throw uploadError const { data: { publicUrl } } = supabase.storage .from('avatars') .getPublicUrl(filePath) setFormData(prev => ({ ...prev, avatar_url: publicUrl })) } catch (error) { console.error('Error uploading image:', error) } } const handleSubmit = async (e: React.FormEvent) => { e.preventDefault() setLoading(true) try { const { data: { user } } = await supabase.auth.getUser() if (!user) throw new Error('No user') // Create profile const { error: profileError } = await supabase .from('profiles') .upsert({ id: user.id, dj_name: formData.dj_name, location: formData.location, bio: formData.bio, website: formData.website, avatar_url: formData.avatar_url, level: formData.level, points: formData.points, max_points: formData.max_points, updated_at: new Date().toISOString() }) if (profileError) throw profileError // Create social statistics const { error: statsError } = await supabase .from('social_stats') .upsert({ user_id: user.id, spotify: formData.spotify, spotify_listeners: formData.spotify_listeners, instagram: formData.instagram, instagram_followers: formData.instagram_followers, tiktok: formData.tiktok, tiktok_followers: formData.tiktok_followers, updated_at: new Date().toISOString() }) if (statsError) throw statsError // Redirect to dashboard router.push('/dashboard') } catch (error) { console.error('Error saving profile:', error) } finally { setLoading(false) } } return ( <div className="min-h-screen bg-white py-16 px-4"> <div className="max-w-2xl mx-auto"> {/* Header */} <div className="text-center mb-12"> <div className="inline-flex items-center gap-3 mb-8"> <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-violet-500 via-fuchsia-500 to-violet-600 flex items-center justify-center shadow-[0_8px_32px_rgba(139,92,246,0.3)] border border-white/10"> <Music className="w-8 h-8 text-gray-900"/> </div> </div> <h1 className="text-4xl font-bold text-gray-900 mb-4"> Create your DJ profile </h1> <p className="text-xl text-gray-600 font-light"> Customize your profile to start your journey </p> </div> {/* Profile Form */} <GlassContainer className="p-8"> <form onSubmit={handleSubmit} className="space-y-8"> {/* Avatar Upload */} <div className="flex justify-center"> <ImageUpload onUpload={handleImageUpload} value={formData.avatar_url} size={150} /> </div> {/* Informations de base */} <div className="space-y-6"> <h3 className="text-xl font-semibold text-gray-900">Informations de base</h3> {/* DJ Name */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Nom de DJ </label> <input type="text"value={formData.dj_name} onChange={(e) => setFormData(prev => ({ ...prev, dj_name: e.target.value }))} className="w-full px-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="DJ Snake"required /> </div> {/* Location */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Localisation </label> <div className="relative"> <MapPin className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5"/> <input type="text"value={formData.location} onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))} className="w-full pl-12 pr-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="Paris, France"required /> </div> </div> {/* Bio */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Bio </label> <textarea value={formData.bio} onChange={(e) => setFormData(prev => ({ ...prev, bio: e.target.value }))} className="w-full px-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50 min-h-[100px]"placeholder="Talk about your musical style and experience..."required /> </div> {/* Website */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Site web </label> <div className="relative"> <Globe className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5"/> <input type="url"value={formData.website} onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))} className="w-full pl-12 pr-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="https://www.yoursite.com"/> </div> </div> </div> {/* Social media */} <div className="space-y-6"> <h3 className="text-xl font-semibold text-gray-900">Social Media</h3> {/* Spotify */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Spotify </label> <div className="relative"> <Music2 className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5"/> <input type="text"value={formData.spotify} onChange={(e) => setFormData(prev => ({ ...prev, spotify: e.target.value }))} className="w-full pl-12 pr-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="Link to your Spotify profile"/> </div> <div className="mt-2"> <label className="block text-sm font-medium text-gray-600 mb-2"> Monthly listeners </label> <input type="number"value={formData.spotify_listeners} onChange={(e) => setFormData(prev => ({ ...prev, spotify_listeners: parseInt(e.target.value) || 0 }))} className="w-full px-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="0"/> </div> </div> {/* Instagram */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> Instagram </label> <div className="relative"> <Instagram className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5"/> <input type="text"value={formData.instagram} onChange={(e) => setFormData(prev => ({ ...prev, instagram: e.target.value }))} className="w-full pl-12 pr-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="@youraccount"/> </div> <div className="mt-2"> <label className="block text-sm font-medium text-gray-600 mb-2"> Number of followers </label> <input type="number"value={formData.instagram_followers} onChange={(e) => setFormData(prev => ({ ...prev, instagram_followers: parseInt(e.target.value) || 0 }))} className="w-full px-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="0"/> </div> </div> {/* TikTok */} <div> <label className="block text-sm font-medium text-gray-700 mb-2"> TikTok </label> <div className="relative"> <Video className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 w-5 h-5"/> <input type="text"value={formData.tiktok} onChange={(e) => setFormData(prev => ({ ...prev, tiktok: e.target.value }))} className="w-full pl-12 pr-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="@youraccount"/> </div> <div className="mt-2"> <label className="block text-sm font-medium text-gray-600 mb-2"> Number of followers </label> <input type="number"value={formData.tiktok_followers} onChange={(e) => setFormData(prev => ({ ...prev, tiktok_followers: parseInt(e.target.value) || 0 }))} className="w-full px-4 py-3 bg-white/[0.02] border border-white/20 rounded-xl text-gray-900 placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-violet-500/50 focus:border-violet-500/50"placeholder="0"/> </div> </div> </div> {/* Submit Button */} <Button type="submit"disabled={loading} variant="gradient"className="w-full py-4 text-lg font-semibold"> {loading ? ( <Loader className="w-6 h-6 animate-spin"/> ) : ( 'Start my journey' )} </Button> </form> </GlassContainer> {/* Background Gradients */} <div className="fixed inset-0 pointer-events-none -z-10"> <div className="absolute top-0 right-0 w-[800px] h-[800px] bg-gradient-to-b from-violet-500/20 via-fuchsia-500/10 to-transparent rounded-full blur-3xl"></div> <div className="absolute bottom-0 left-0 w-[600px] h-[600px] bg-gradient-to-t from-blue-500/20 via-violet-500/10 to-transparent rounded-full blur-3xl"></div> </div> </div> </div> ) } 